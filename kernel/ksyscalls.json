{
    "$schema": "../assets/syscalls.schema.json",
    "includes": [
        "mos/filesystem/filesystem.h",
        "mos/mos_global.h",
        "mos/platform/platform.h",
        "mos/types.h"
    ],
    "syscalls": [
        {
            "number": 0,
            "name": "panic",
            "return": "void",
            "arguments": [ ]
        },
        {
            "number": 1,
            "name": "file_open",
            "return": "fd_t",
            "arguments": [ { "type": "const char *", "arg": "file_path" }, { "type": "file_open_flags", "arg": "flags" } ]
        },
        {
            "number": 2,
            "name": "file_stat",
            "return": "bool",
            "arguments": [ { "type": "const char *", "arg": "file_path" }, { "type": "file_stat_t *", "arg": "stat" } ]
        },
        {
            "number": 3,
            "name": "io_read",
            "return": "size_t",
            "arguments": [ { "type": "fd_t", "arg": "fd" }, { "type": "void *", "arg": "buffer" }, { "type": "size_t", "arg": "size" }, { "type": "size_t", "arg": "offset" } ]
        },
        {
            "number": 4,
            "name": "io_write",
            "return": "size_t",
            "arguments": [ { "type": "fd_t", "arg": "fd" }, { "type": "const void *", "arg": "buffer" }, { "type": "size_t", "arg": "size" }, { "type": "size_t", "arg": "offset" } ]
        },
        {
            "number": 5,
            "name": "io_close",
            "return": "bool",
            "arguments": [ { "type": "fd_t", "arg": "fd" } ]
        },
        {
            "number": 6,
            "name": "exit",
            "return": null,
            "arguments": [ { "type": "u32", "arg": "exit_code" } ]
        },
        {
            "number": 7,
            "name": "yield_cpu",
            "return": "void",
            "arguments": [ ]
        },
        {
            "number": 8,
            "name": "fork",
            "return": "pid_t",
            "arguments": [ ]
        },
        {
            "number": 9,
            "name": "exec",
            "return": "pid_t",
            "arguments": [ { "type": "const char *", "arg": "file_path" }, { "type": "const char *const *", "arg": "argv" } ]
        },
        {
            "number": 10,
            "name": "get_pid",
            "return": "pid_t",
            "arguments": [ ]
        },
        {
            "number": 11,
            "name": "get_parent_pid",
            "return": "pid_t",
            "arguments": [ ]
        },
        {
            "number": 12,
            "name": "spawn",
            "return": "pid_t",
            "arguments": [ { "type": "const char *", "arg": "file_path" }, { "type": "int", "arg": "argc" }, { "type": "const char *const *", "arg": "argv" } ]
        },
        {
            "number": 13,
            "name": "create_thread",
            "return": "tid_t",
            "arguments": [ { "type": "const char *", "arg": "name" }, { "type": "thread_entry_t", "arg": "entry" }, { "type": "void *", "arg": "arg" } ]
        },
        {
            "number": 14,
            "name": "get_tid",
            "return": "tid_t",
            "arguments": [ ]
        },
        {
            "number": 15,
            "name": "thread_exit",
            "return": null,
            "arguments": [ ]
        },
        {
            "number": 16,
            "name": "heap_control",
            "return": "uintptr_t",
            "arguments": [ { "type": "heap_control_op", "arg": "op" }, { "type": "uintptr_t", "arg": "arg" } ]
        },
        {
            "number": 17,
            "name": "wait_for_thread",
            "return": "bool",
            "arguments": [ { "type": "tid_t", "arg": "tid" } ]
        },
        {
            "number": 18,
            "name": "mutex_acquire",
            "return": "bool",
            "arguments": [ { "type": "bool *", "arg": "mutex" } ],
            "comments": [
                "Try to acquire a mutex and block the calling thread.",
                "\\param mutex The mutex to lock.",
                "\\return true if the mutex was locked, false if it was already locked.",
                "",
                "This syscall blocks the calling thread until the target mutex has been released",
                "by another thread. Once the mutex is acquired, it returns true and the calling",
                "thread will be scheduled to run again."
            ]
        },
        {
            "number": 19,
            "name": "mutex_release",
            "return": "bool",
            "arguments": [ { "type": "bool *", "arg": "mutex" } ],
            "comments": [
                "Release a mutex.",
                "\\param mutex The mutex to release.",
                "\\return true if the mutex was released, false if it was already released.",
                "",
                "This syscall releases a mutex that was previously acquired by the some thread."
            ]
        }
    ]
}
